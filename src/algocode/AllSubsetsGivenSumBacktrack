
/*
* Works for negative integers. Time complexity worst case is 2^n
*/

class AllSubsetsGivenSumBacktrack{
  

  public static void findSubSets(int n, int S, int[] X, int k, int m, int[] input){
    
    X[k]=1;
    if(S+input[k]==m){
      //print subset using values in X
      for(int i=0; i<X.length;i++){
        if(X[i]==1){
          System.out.print(input[i]+" ");
        }
        
      }
      System.out.println();
      
     X[k]=0;
      
      
    }
    else{
      if((k+1)<n && S+input[k]<=m){
          findSubSets(n, S+input[k], X, k+1, m, input);
      }
    }
    X[k] = 0;
    
    if((k+1)<n && (S+input[k+1])<=m){
          findSubSets(n, S, X, k+1, m, input);
    }
    
  }


public static void main(String [] args){
  
    int[] input = {-2, 4, 9, 1, 6, 4, -8, 5, 0, 10};
    int[] X =  new int[input.length];
    int sum = 7;

    findSubSets(input.length, 0, X, 0, sum, input);
  
}
}
